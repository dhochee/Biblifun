// <auto-generated />
using System;
using Biblifun.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Biblifun.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190621141122_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Biblifun.Data.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Biblifun.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Configuration");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("JobTitle");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Biblifun.Data.Models.BibleBook", b =>
                {
                    b.Property<int>("BibleBookId");

                    b.Property<string>("Name");

                    b.Property<int>("TotalChapters");

                    b.HasKey("BibleBookId");

                    b.ToTable("BibleBooks");
                });

            modelBuilder.Entity("Biblifun.Data.Models.BibleBookName", b =>
                {
                    b.Property<int>("BibleBookNameId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlternateIdentifiers");

                    b.Property<int>("BibleBookId");

                    b.Property<string>("Language");

                    b.Property<string>("Name");

                    b.HasKey("BibleBookNameId");

                    b.HasIndex("BibleBookId");

                    b.ToTable("BibleBookNames");
                });

            modelBuilder.Entity("Biblifun.Data.Models.BibleChapter", b =>
                {
                    b.Property<int>("BibleChapterId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BibleBookId");

                    b.Property<int>("ChapterNumber");

                    b.Property<int>("TotalVerses");

                    b.HasKey("BibleChapterId");

                    b.HasIndex("BibleBookId");

                    b.ToTable("BibleChapter");
                });

            modelBuilder.Entity("Biblifun.Data.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Language");

                    b.Property<string>("Name");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserId");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Biblifun.Data.Models.ScriptureSet", b =>
                {
                    b.Property<int>("ScriptureSetId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsPassageSet");

                    b.Property<string>("Language");

                    b.Property<string>("OwnedByUserId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("ScriptureSetId");

                    b.HasIndex("OwnedByUserId");

                    b.ToTable("ScriptureSets");
                });

            modelBuilder.Entity("Biblifun.Data.Models.ScriptureSetCategory", b =>
                {
                    b.Property<int>("ScriptureSetId");

                    b.Property<int>("CategoryId");

                    b.HasKey("ScriptureSetId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ScriptureSetCategories");
                });

            modelBuilder.Entity("Biblifun.Data.Models.ScriptureSetItem", b =>
                {
                    b.Property<int>("ScriptureSetItemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("ScriptureSetId");

                    b.Property<string>("Summary");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("VerseSetCode");

                    b.HasKey("ScriptureSetItemId");

                    b.HasIndex("ScriptureSetId");

                    b.ToTable("ScriptureSetItems");
                });

            modelBuilder.Entity("Biblifun.Data.Models.ScriptureSetItemCategory", b =>
                {
                    b.Property<int>("ScriptureSetItemId");

                    b.Property<int>("CategoryId");

                    b.HasKey("ScriptureSetItemId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ScriptureSetItemCategories");
                });

            modelBuilder.Entity("Biblifun.Data.Models.VerseCache", b =>
                {
                    b.Property<int>("VerseCacheId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Html");

                    b.Property<string>("Language");

                    b.Property<int>("SearchCount");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("VerseSetCode");

                    b.HasKey("VerseCacheId");

                    b.ToTable("CachedVerses");
                });

            modelBuilder.Entity("Biblifun.Data.Models.VerseSummary", b =>
                {
                    b.Property<int>("VerseSummaryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("OwnedByUserId");

                    b.Property<string>("Summary");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("VerseSetCode");

                    b.HasKey("VerseSummaryId");

                    b.HasIndex("OwnedByUserId");

                    b.ToTable("VerseSummaries");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Biblifun.Data.Models.BibleBookName", b =>
                {
                    b.HasOne("Biblifun.Data.Models.BibleBook", "Book")
                        .WithMany("BookNames")
                        .HasForeignKey("BibleBookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biblifun.Data.Models.BibleChapter", b =>
                {
                    b.HasOne("Biblifun.Data.Models.BibleBook", "Book")
                        .WithMany("Chapters")
                        .HasForeignKey("BibleBookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biblifun.Data.Models.ScriptureSet", b =>
                {
                    b.HasOne("Biblifun.Data.Models.ApplicationUser", "OwnedByUser")
                        .WithMany()
                        .HasForeignKey("OwnedByUserId");
                });

            modelBuilder.Entity("Biblifun.Data.Models.ScriptureSetCategory", b =>
                {
                    b.HasOne("Biblifun.Data.Models.Category", "Category")
                        .WithMany("ScriptureSetCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Biblifun.Data.Models.ScriptureSet", "ScriptureSet")
                        .WithMany("ScriptureSetCategories")
                        .HasForeignKey("ScriptureSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biblifun.Data.Models.ScriptureSetItem", b =>
                {
                    b.HasOne("Biblifun.Data.Models.ScriptureSet", "ScriptureSet")
                        .WithMany("ScriptureSetItems")
                        .HasForeignKey("ScriptureSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biblifun.Data.Models.ScriptureSetItemCategory", b =>
                {
                    b.HasOne("Biblifun.Data.Models.Category", "Category")
                        .WithMany("ScriptureSetItemCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Biblifun.Data.Models.ScriptureSetItem", "ScriptureSetItem")
                        .WithMany("ScriptureSetItemCategories")
                        .HasForeignKey("ScriptureSetItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biblifun.Data.Models.VerseSummary", b =>
                {
                    b.HasOne("Biblifun.Data.Models.ApplicationUser", "OwnedByUser")
                        .WithMany()
                        .HasForeignKey("OwnedByUserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Biblifun.Data.Models.ApplicationRole")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Biblifun.Data.Models.ApplicationUser")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Biblifun.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Biblifun.Data.Models.ApplicationRole")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Biblifun.Data.Models.ApplicationUser")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Biblifun.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
